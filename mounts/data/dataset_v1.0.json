{
  "general": [
    {
      "id": "gen_001",
      "text": "Hey there, I'm Zi Shen!",
      "metadata": { "topic": "identity", "subtopic": "greeting" },
      "questions": ["Who are you?"]
    },
    {
      "id": "gen_002",
      "text": "I am Zi Shen, a Year 3 student studying Math and Computer Science at Nanyang Technological University (NTU). My current focus is on backend development and integrating AI into projects.",
      "metadata": {
        "topic": "identity",
        "subtopic": "background_current_focus"
      },
      "questions": ["Tell me more about yourself"]
    },
    {
      "id": "gen_003",
      "text": "I have a background in Math and Computer Science from NTU. My experience comes from academic projects, internships, and personal endeavors showcased in this portfolio.",
      "metadata": { "topic": "identity", "subtopic": "experience_overview" },
      "questions": [
        "What is your background or experience?",
        "Tell me about your experience."
      ]
    },
    {
      "id": "gen_004",
      "text": "My portfolio consists of 5 main projects: 1) Personal portfolio AI assistant (this chatbot). 2) XCuisite: An e-commerce website for doughnuts with a payment gateway. 3) Automation Manager: An application for automated 5G signal testing on Android devices. 4) Hologram Chatbot: A reception AI chatbot with animations and lip-syncing for the Gaia building. 5) SCCC - Interactive Articulatory Accent Database: A website displaying collected audio for Singapore Mandarin speakers. Feel free to ask for more details on a specific project.",
      "metadata": { "topic": "projects", "subtopic": "list_detailed" },
      "questions": [
        "What are the projects you are recently working on?",
        "Can I see your personal projects?",
        "projects",
        "What projects has you worked on?",
        "What kind of projects have you worked on?",
        "Can you tell me about your projects?"
      ]
    },
    {
      "id": "gen_005",
      "text": "Some of my recent project highlights include developing this AI assistant and completing the XCuisite e-commerce website, focusing on payment gateway integration and modern animations.",
      "metadata": { "topic": "projects", "subtopic": "recent_highlights" },
      "questions": [
        "What are some of your recent achievements or highlights?",
        "What have you been working on recently?"
      ]
    },
    {
      "id": "gen_006",
      "text": "A key takeaway from my projects is gaining experience in integrating AI functionalities into web pages.",
      "metadata": { "topic": "projects", "subtopic": "key_takeaways" },
      "questions": ["What are some of the key takeaways from your projects?"]
    },
    {
      "id": "gen_007",
      "text": "I am proficient in programming languages such as Python, Javascript, and C# (.NET).",
      "metadata": { "topic": "skills", "subtopic": "programming_languages" },
      "questions": [
        "What programming languages are you proficient in?",
        "How many programming languages do you know?"
      ]
    },
    {
      "id": "gen_008",
      "text": "My technical skills include frameworks and tools like React, .NET, gRPC, RESTful APIs, Microsoft Azure, Docker, Postgres SQL, Firebase, Git, and Google Cloud Console.",
      "metadata": { "topic": "skills", "subtopic": "technologies_tools" },
      "questions": [
        "What are your technical skills?",
        "show me your teck stack"
      ]
    },
    {
      "id": "gen_009",
      "text": "My fundamental skills cover Object-Oriented Programming (OOP), Data Structures, Algorithms, Databases, and Operating Systems. I am also familiar with Power BI, Excel, Word, and PowerPoint.",
      "metadata": { "topic": "skills", "subtopic": "fundamentals_other" },
      "questions": [
        "What are your other skills?",
        "What are you skills?",
        "Can you show me your skills?"
      ]
    },
    {
      "id": "gen_010",
      "text": "I primarily use React for frontend and .NET for backend development in my personal projects, but I am always willing to learn new technologies and tools to meet project requirements.",
      "metadata": { "topic": "skills", "subtopic": "preferred_technologies" },
      "questions": ["What are your preferred technologies for an internship?"]
    },
    {
      "id": "gen_011",
      "text": "My primary skill areas are software development (especially backend/full-stack), AI integration into software, and web development.",
      "metadata": { "topic": "skills", "subtopic": "primary_areas" },
      "questions": [
        "What are your primary skills and areas of expertise?",
        "What are you good at?",
        "What kind of services or skills do you offer?",
        "What can you do?"
      ]
    },
    {
      "id": "gen_012",
      "text": "You can contact me via email at zishenchan@gmail.com or through my LinkedIn profile. Alternatively, you can use the contact form at the bottom of my portfolio website.",
      "metadata": { "topic": "contact", "subtopic": "methods" },
      "questions": [
        "Can you show me the ways to contact you in person?",
        "how do I contact you?",
        "How can I contact you?",
        "What's your email?"
      ]
    },
    {
      "id": "gen_013",
      "text": "My GitHub profile is available at https://github.com/ZSHenChan.",
      "metadata": {
        "topic": "contact",
        "subtopic": "social_link",
        "entity": "github"
      },
      "questions": ["github", "can you show me your github?"]
    },
    {
      "id": "gen_014",
      "text": "My LinkedIn profile can be found at https://www.linkedin.com/in/zi-shen-chan/.",
      "metadata": {
        "topic": "contact",
        "subtopic": "social_link",
        "entity": "linkedin"
      },
      "questions": [
        "linkedin",
        "can I see your linkedin profile?",
        "Where can I find more information about you outside of this website?",
        "Do you have a LinkedIn?"
      ]
    },
    {
      "id": "gen_015",
      "text": "I don't have direct access to my resume file, but you can find a downloadable link for it in the hero section (the header area below the blue lamp) of this website.",
      "metadata": { "topic": "resume", "subtopic": "access_location" },
      "questions": [
        "resume",
        "can I have your resume?",
        "show me your resume",
        "Do you have a resume or CV available?",
        "Where can I find your resume?"
      ]
    },
    {
      "id": "gen_016",
      "text": "I am primarily looking for backend or full-stack software development roles, but I am open to discussing other related opportunities as well.",
      "metadata": {
        "topic": "career",
        "subtopic": "role_preference",
        "entity": "job"
      },
      "questions": [
        "Are you interested in frontend, backend, or full-stack roles?"
      ]
    },
    {
      "id": "gen_017",
      "text": "For internships, I am seeking roles such as full-stack/backend software developer, DevOps engineer, or embedded systems engineer. I'm open to recommendations for other suitable roles too.",
      "metadata": {
        "topic": "career",
        "subtopic": "role_preference",
        "entity": "internship"
      },
      "questions": [
        "What kind of internships are you looking for?",
        "What are you looking for professionally?",
        "Are you looking for a job?"
      ]
    },
    {
      "id": "gen_018",
      "text": "Regarding internship availability, I am available for full-time roles from June 1st to August 15th, 2025, and available for part-time roles from August 15th, 2025 onwards.",
      "metadata": {
        "topic": "career",
        "subtopic": "availability",
        "entity": "internship"
      },
      "questions": [
        "availability",
        "internship",
        "When are you available",
        "when do you available for full-time internship",
        "when do you available for part-time internship"
      ]
    },
    {
      "id": "gen_019",
      "text": "I am pursuing a Bachelor's degree in Mathematical and Computer Sciences at Nanyang Technological University (NTU). My current CGPA is 4.49, and I am expected to graduate in July 2026.",
      "metadata": { "topic": "education", "subtopic": "details" },
      "questions": [
        "education",
        "Where do you study?",
        "Can I know you current CGPA?",
        "When do you graduate",
        "when is your expected graduation from university"
      ]
    },
    {
      "id": "gen_020",
      "text": "My personal interests include creating iOS Shortcuts, playing musical instruments, hiking, and travelling.",
      "metadata": { "topic": "personal", "subtopic": "hobbies" },
      "questions": [
        "what do you personally interested in?",
        "What are your hobbies or interests?"
      ]
    },
    {
      "id": "gen_021",
      "text": "This website serves as my personal portfolio. Its goal is to showcase my projects, skills, and experience, providing a comprehensive overview for potential employers, collaborators, or anyone interested in my work.",
      "metadata": { "topic": "website", "subtopic": "purpose" },
      "questions": [
        "What is this website about?",
        "What is your portfolio website for?",
        "Is this website your personal portfolio?",
        "Is this your portfolio?",
        "What is the overall goal or purpose of your portfolio website?"
      ]
    },
    {
      "id": "gen_022",
      "text": "On this website, I showcase projects like this AI assistant, the XCuisite e-commerce site, and work from my internships and academic studies.",
      "metadata": { "topic": "website", "subtopic": "content_showcase" },
      "questions": [
        "What kind of work do you showcase on this website?",
        "What projects are featured here?"
      ]
    },
    {
      "id": "gen_023",
      "text": "I am currently based in Singapore.",
      "metadata": { "topic": "personal", "subtopic": "location" },
      "questions": ["Where are you currently based?", "Where are you located?"]
    },
    {
      "id": "gen_024",
      "text": "The website was last updated on March 24, 2025. I aim to keep it current.",
      "metadata": { "topic": "website", "subtopic": "maintenance" },
      "questions": [
        "When was this website last updated?",
        "How recent is your portfolio?"
      ]
    },
    {
      "id": "gen_025",
      "text": "This website is built using Next.js. The AI assistant integrates the Google AI for Developers API.",
      "metadata": { "topic": "website", "subtopic": "technology_stack" },
      "questions": [
        "What technologies did you use to build this website?",
        "What is your website built with?"
      ]
    },
    {
      "id": "gen_026",
      "text": "Currently, there isn't a blog section on this website, but it's something I might add in the future.",
      "metadata": { "topic": "website", "subtopic": "content_other" },
      "questions": [
        "Is there a blog or any other content on this website besides your portfolio?"
      ]
    },
    {
      "id": "gen_027",
      "text": "Yes, I am open to discussing freelance opportunities if they align with my skills and interests. Please contact me with project details.",
      "metadata": { "topic": "career", "subtopic": "freelance" },
      "questions": [
        "Are you open to freelance opportunities?",
        "Do you do freelance work?"
      ]
    },
    {
      "id": "gen_028",
      "text": "The design philosophy for this website focused on creating a clean, modern, user-friendly experience that balances visual appeal with clear information presentation.",
      "metadata": { "topic": "website", "subtopic": "design_philosophy" },
      "questions": [
        "What kind of design philosophy did you follow for this website?"
      ]
    },
    {
      "id": "gen_029",
      "text": "Yes, this website is designed to be responsive and should adapt well to various screen sizes, including mobile phones and tablets.",
      "metadata": { "topic": "website", "subtopic": "responsiveness" },
      "questions": [
        "Is the website mobile-friendly?",
        "Can I view your website on my phone?"
      ]
    },
    {
      "id": "gen_030",
      "text": "I was inspired to create this portfolio to establish a professional online presence and have a central hub for showcasing my skills and projects.",
      "metadata": { "topic": "website", "subtopic": "inspiration" },
      "questions": ["What inspired you to create this portfolio?"]
    },
    {
      "id": "gen_031",
      "text": "My career aspirations involve contributing to innovative AI projects and creating applications that simplify life by handling repetitive tasks.",
      "metadata": { "topic": "career", "subtopic": "aspirations" },
      "questions": [
        "What are your career aspirations?",
        "What are your career goals?"
      ]
    },
    {
      "id": "gen_032",
      "text": "The best way to understand my work is by exploring the 'Projects' section, which contains detailed descriptions, and often links to live demos or code repositories.",
      "metadata": { "topic": "website", "subtopic": "navigation_advice" },
      "questions": [
        "What is the best way to understand your work?",
        "How can I learn more about your projects?"
      ]
    }
  ],

  "tech": [
    {
      "id": "tech_001",
      "text": "I primarily use Postgres SQL for database management and am also comfortable working with cloud services like Azure SQL.",
      "metadata": { "topic": "skills", "subtopic": "databases" },
      "questions": ["What databases have you worked with?"]
    },
    {
      "id": "tech_002",
      "text": "I used gRPC for efficient, high-performance communication between an API gateway and microservices in the Automation Manager project during my internship at Rohde & Schwarz.",
      "metadata": {
        "topic": "skills",
        "subtopic": "grpc_usage",
        "entity": "Automation Manager"
      },
      "questions": ["Can you give an example of how you've used gRPC?"]
    },
    {
      "id": "tech_003",
      "text": "For backend development, I am most comfortable with the .NET framework.",
      "metadata": {
        "topic": "skills",
        "subtopic": "framework_preference",
        "entity": "backend"
      },
      "questions": ["Which backend frameworks are you most comfortable with?"]
    },
    {
      "id": "tech_004",
      "text": "For frontend development, I am most comfortable working with React.",
      "metadata": {
        "topic": "skills",
        "subtopic": "framework_preference",
        "entity": "frontend"
      },
      "questions": ["Which frontend frameworks are you most comfortable with?"]
    },
    {
      "id": "tech_005",
      "text": "In team settings, I appreciate daily stand-up meetings to share progress, discuss challenges, and learn from teammates' problem-solving approaches.",
      "metadata": { "topic": "work_style", "subtopic": "teamwork" },
      "questions": ["How do you handle working in a team?"]
    },
    {
      "id": "tech_006",
      "text": "To stay updated with new technologies, I subscribe to newsletters and blogs (like Superhuman, Rundown, TechCrunch) and browse tech platforms such as DailyDevs.",
      "metadata": { "topic": "learning", "subtopic": "staying_updated" },
      "questions": ["How do you stay up-to-date with new technologies?"]
    }
  ],

  "portfolio_AI": [
    {
      "id": "pai_001",
      "text": "The Portfolio Assistant aims to act as a digital replica of myself, answering basic questions about my portfolio, academics, projects, and experience.",
      "metadata": { "topic": "project_portfolio_ai", "subtopic": "purpose" },
      "questions": [
        "What is the purpose of the Portfolio Assistant?",
        "What does your Portfolio Assistant do?"
      ]
    },
    {
      "id": "pai_002",
      "text": "The inspiration for this assistant came from a long-term goal of creating a personal AI assistant capable of handling visitor inquiries.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "inspiration"
      },
      "questions": ["What inspired you to create your own assistant?"]
    },
    {
      "id": "pai_003",
      "text": "Development started around the end of January, and the training and fine-tuning process is ongoing to improve its knowledge and conversational abilities.",
      "metadata": { "topic": "project_portfolio_ai", "subtopic": "timeline" },
      "questions": ["How long do you take to train the assistant"]
    },
    {
      "id": "pai_004",
      "text": "The development process involved significant time gathering and refining data. Observing the model improve felt rewarding, akin to watching learning and growth.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "development_process"
      },
      "questions": [
        "What was the development process of the portfolio assistant like?",
        "What are the key takeaways from your personal assistant?"
      ]
    },
    {
      "id": "pai_005",
      "text": "A primary challenge was managing large amounts of data for the model, covering collection, cleaning, transformation, training, and evaluation. Other challenges included defining the conversation scope, ensuring context awareness, tracking conversation flow, and handling the customization required for portfolio-specific Q&A. Overcoming these involved referencing official documentation and articles.",
      "metadata": { "topic": "project_portfolio_ai", "subtopic": "challenges" },
      "questions": [
        "Tell me about a challenging project and how you overcame it.",
        "What are the challenges you faced in developing the portfolio assistant?",
        "What challenges did you face in developing the Portfolio Assistant?"
      ]
    },
    {
      "id": "pai_006",
      "text": "Key successes and learnings include the necessity of extensive data preparation and the effectiveness of prompt engineering and parameter refinement for customizing output.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "learnings_successes"
      },
      "questions": [
        "What are the key success in developing the portfolio assistant?"
      ]
    },
    {
      "id": "pai_007",
      "text": "The Portfolio Assistant was customized by fine-tuning it on relevant portfolio data and refining its output style for handling user questions effectively.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "customization"
      },
      "questions": ["How is your Portfolio Assistant customized?"]
    },
    {
      "id": "pai_008",
      "text": "Tuning the assistant involves adjusting parameters related to conversation scope, context awareness, and conversation flow tracking.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "tuning_parameters"
      },
      "questions": ["What is involved in tuning the Portfolio Assistant?"]
    },
    {
      "id": "pai_009",
      "text": "The base model used for the Portfolio Assistant is Gemini 1.5 Flash.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "base_model"
      },
      "questions": ["What model did you use for the Portfolio Assistant?"]
    },
    {
      "id": "pai_010",
      "text": "The training dataset consisted of potential user questions about the portfolio, corresponding answers, and examples of natural conversation style.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "training_dataset"
      },
      "questions": ["What dataset was used for training the AI assistant?"]
    },
    {
      "id": "pai_011",
      "text": "Data preprocessing involved cleaning the data, ensuring consistency, and formatting it appropriately for the model.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "training_preprocessing"
      },
      "questions": ["How was the data preprocessed for the AI assistant?"]
    },
    {
      "id": "pai_012",
      "text": "The model was fine-tuned by providing it with conversations and specific information related to the portfolio content.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "training_finetuning"
      },
      "questions": ["How was the model fine-tuned for the AI assistant?"]
    },
    {
      "id": "pai_013",
      "text": "Javascript was used for the frontend development, and Python for backend tasks.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "languages"
      },
      "questions": [
        "What programming languages were used for the AI assistant?"
      ]
    },
    {
      "id": "pai_014",
      "text": "Key frameworks and libraries included React for the user interface and Google AI libraries for model interaction.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "frameworks_libraries"
      },
      "questions": [
        "What frameworks and libraries were used for the AI assistant?"
      ]
    },
    {
      "id": "pai_015",
      "text": "API integration was handled using the Google AI for Developers API.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "api_integration"
      },
      "questions": ["How was the API integration handled for the AI assistant?"]
    },
    {
      "id": "pai_016",
      "text": "The user interface was designed as a clean, simple, and easy-to-use chat interface.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "ui_design"
      },
      "questions": ["How was the user interface designed for the AI assistant?"]
    },
    {
      "id": "pai_017",
      "text": "The assistant is deployed on a Google Cloud server.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "deployment"
      },
      "questions": ["How was the AI assistant deployed?"]
    },
    {
      "id": "pai_018",
      "text": "The architecture involves the frontend sending messages to the backend, which communicates with the AI model via API, and returns the response.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "architecture"
      },
      "questions": ["What is the architecture of the AI assistant?"]
    },
    {
      "id": "pai_019",
      "text": "Standard cloud server specifications are used for hosting the assistant.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_stack",
        "entity": "hardware"
      },
      "questions": [
        "What are the hardware specifications for the AI assistant?"
      ]
    },
    {
      "id": "pai_020",
      "text": "The assistant processes user queries by interpreting intent and retrieving relevant information from its portfolio knowledge base, aiming for clarity.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "functionality_query_handling"
      },
      "questions": ["How does the assistant handle user queries?"]
    },
    {
      "id": "pai_021",
      "text": "To ensure accuracy, the assistant relies on an internal knowledge base ('cheat sheet') and is instructed to request clarification if unsure.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "functionality_accuracy"
      },
      "questions": ["How does the assistant ensure accurate information?"]
    },
    {
      "id": "pai_022",
      "text": "Context is maintained by tracking the conversation history, using summaries for longer dialogues to ensure continuity.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "functionality_context"
      },
      "questions": [
        "How does the assistant maintain context during conversations?"
      ]
    },
    {
      "id": "pai_023",
      "text": "When faced with ambiguous questions, the assistant asks for clarification to provide a more useful response.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "functionality_ambiguity"
      },
      "questions": ["How does the assistant handle ambiguous questions?"]
    },
    {
      "id": "pai_024",
      "text": "Error handling includes displaying generic messages like 'Oops, something went wrong' to the user. Internally, issues are logged, and work is ongoing to provide more helpful error messages and improve robustness.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "functionality_error_handling"
      },
      "questions": [
        "How does the assistant handle errors or unexpected inputs?",
        "What are the error handling mechanisms in the AI assistant?"
      ]
    },
    {
      "id": "pai_025",
      "text": "Security considerations include not storing any personal user data, encrypting communications, and following best practices to prevent misuse. Data is discarded after the conversation.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "security_storage"
      },
      "questions": [
        "What are the security considerations for this assistant?",
        "How is the AI assistant's data stored?",
        "How is the AI assistant's data secured?"
      ]
    },
    {
      "id": "pai_026",
      "text": "Testing involved evaluating the assistant with diverse questions and gathering user feedback, as there's no single objective measure of correctness. Strategies include both manual testing and automated tests.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "evaluation_testing"
      },
      "questions": [
        "How did you test and evaluate the assistant?",
        "What are the testing strategies used for the AI assistant?"
      ]
    },
    {
      "id": "pai_027",
      "text": "Performance is evaluated using metrics like accuracy (compared to known answers), response speed, and user satisfaction. Benchmarking involves Google AI metrics and custom tests.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "evaluation_metrics_benchmarking"
      },
      "questions": [
        "What are the performance metrics for this assistant?",
        "How was the AI assistant's performance benchmarked?"
      ]
    },
    {
      "id": "pai_028",
      "text": "Accuracy is measured by comparing the assistant's responses against a set of known correct answers.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "evaluation_accuracy_measurement"
      },
      "questions": ["How was the AI assistant's accuracy measured?"]
    },
    {
      "id": "pai_029",
      "text": "Response time is measured using Google AI API metrics and custom testing.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "evaluation_response_time_measurement"
      },
      "questions": ["How was the AI assistant's response time measured?"]
    },
    {
      "id": "pai_030",
      "text": "User feedback indicates appreciation for quick answers but suggests room for improvement in handling more complex or tricky questions.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "evaluation_user_feedback"
      },
      "questions": ["What is the user feedback on this assistant?"]
    },
    {
      "id": "pai_031",
      "text": "Performance is optimized by using clear prompts, well-organized data, and selecting a fast base model.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_optimization"
      },
      "questions": ["How is the AI assistant's performance optimized?"]
    },
    {
      "id": "pai_032",
      "text": "Latency is managed by using the fast Google AI API and keeping prompts concise.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_latency"
      },
      "questions": ["How is the AI assistant's latency managed?"]
    },
    {
      "id": "pai_033",
      "text": "Reliability is ensured through the underlying Google Cloud infrastructure, internal error handling mechanisms, and regular testing.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_reliability"
      },
      "questions": ["How is the AI assistant's reliability ensured?"]
    },
    {
      "id": "pai_034",
      "text": "Potential performance bottlenecks include generating invalid responses, especially for complex queries.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_bottlenecks"
      },
      "questions": ["What are the potential bottlenecks in the AI assistant?"]
    },
    {
      "id": "pai_035",
      "text": "Bottlenecks are addressed by optimizing prompts, using faster models, and ensuring data is well-organized.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_bottleneck_solutions"
      },
      "questions": ["How were the bottlenecks addressed in the AI assistant?"]
    },
    {
      "id": "pai_036",
      "text": "Memory usage is primarily managed by the AI model itself, aided by keeping conversation histories relatively short.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_resource_mgmt",
        "entity": "memory"
      },
      "questions": ["How is the AI assistant's memory usage managed?"]
    },
    {
      "id": "pai_037",
      "text": "CPU usage is managed by the cloud infrastructure and optimized through efficient prompting and monitoring.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_resource_mgmt",
        "entity": "cpu"
      },
      "questions": ["How is the AI assistant's CPU usage managed?"]
    },
    {
      "id": "pai_038",
      "text": "Network usage is handled via the Google AI API, focusing on efficient requests.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "performance_resource_mgmt",
        "entity": "network"
      },
      "questions": ["How is the AI assistant's network usage managed?"]
    },
    {
      "id": "pai_039",
      "text": "The assistant is designed to be scalable due to its cloud-based infrastructure.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "scalability"
      },
      "questions": ["How is the AI assistant scalable?"]
    },
    {
      "id": "pai_040",
      "text": "Maintenance involves keeping the knowledge base updated and fixing bugs as they arise.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "maintenance"
      },
      "questions": ["How is the AI assistant maintained?"]
    },
    {
      "id": "pai_041",
      "text": "The assistant is monitored using Google Cloud's monitoring tools, with alerts for issues.",
      "metadata": { "topic": "project_portfolio_ai", "subtopic": "monitoring" },
      "questions": ["How is the AI assistant monitored?"]
    },
    {
      "id": "pai_042",
      "text": "Updates are ongoing, focusing on adding new information and improving question understanding.",
      "metadata": { "topic": "project_portfolio_ai", "subtopic": "updates" },
      "questions": ["How is the AI assistant updated?"]
    },
    {
      "id": "pai_043",
      "text": "Logging and debugging use Google Cloud tools combined with console logging.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_logging_debugging"
      },
      "questions": [
        "What are the logging and debugging tools used for the AI assistant?"
      ]
    },
    {
      "id": "pai_044",
      "text": "Current limitations include its knowledge being confined to the portfolio and potential difficulties with very complex or nuanced questions.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "limitations"
      },
      "questions": ["What are the limitations of this assistant?"]
    },
    {
      "id": "pai_045",
      "text": "Future plans include integrating function calling capabilities to handle more complex tasks like sending emails or setting reminders.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "future_plans"
      },
      "questions": ["What are the future plans for this AI assistant?"]
    },
    {
      "id": "pai_046",
      "text": "The assistant integrates directly into the portfolio website for easy interaction.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "technical_integration"
      },
      "questions": [
        "How does the assistant integrate with the portfolio website?"
      ]
    },
    {
      "id": "pai_047",
      "text": "The only system requirement for users is a standard web browser.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "system_requirements"
      },
      "questions": [
        "What are the system requirements for running the AI assistant?"
      ]
    },
    {
      "id": "pai_048",
      "text": "You can test the assistant's capabilities by asking questions about the portfolio directly.",
      "metadata": {
        "topic": "project_portfolio_ai",
        "subtopic": "demonstration"
      },
      "questions": ["Can you demonstrate the assistant's capabilities?"]
    }
  ],

  "xcuisite": [
    {
      "id": "xc_001",
      "text": "The XCuisite website is an e-commerce platform designed for selling doughnuts. A live demo is available at www.xcuisite.store, or you can click the link in the 'Projects' section.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "overview_description_demo"
      },
      "questions": [
        "xcuisite website",
        "tell me about xcuisite website",
        "can you show me xcuisite website?",
        "what is xcuisite",
        "xcuisite",
        "explain xcuisite",
        "Is the XCuisite website currently live? If so, what is the URL?",
        "Can you provide a demo of the XCuisite website?",
        "How do I get started using the XCuisite website?"
      ]
    },
    {
      "id": "xc_002",
      "text": "The XCuisite Website project's technical goal was to deepen understanding of a full-stack website's flow, covering frontend/backend communication, error handling, authN/authZ, database queries, payment processing, scalability, and containerized cloud deployment with SSL and a custom domain.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "goals_learning_objectives"
      },
      "questions": [
        "what is the goal of the xcuisite website project?",
        "tell me more about xcuisite website",
        "tell me more about xcuisite"
      ]
    },
    {
      "id": "xc_003",
      "text": "The main driver was building a complete end-to-end e-commerce app to solidify understanding of the development lifecycle (architecture, integration, security, payments, data, deployment). A playful doughnut theme from an earlier project provided context.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "motivation_driver"
      },
      "questions": [
        "What was the main driver behind the XCuisite project?",
        "What specific skills were you aiming to develop or showcase with XCuisite?",
        "Beyond the technical goals, what motivated the XCuisite project?",
        "Could you elaborate on the learning objectives for the XCuisite website?"
      ]
    },
    {
      "id": "xc_004",
      "text": "XCuisite originated from a frontend-only design (HTML/CSS/JS). Its visual appeal made it a good candidate for expansion into a full-stack application to learn backend, database, and cloud deployment technologies.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "origin_evolution"
      },
      "questions": [
        "What's the origin story of the XCuisite project?",
        "How did the idea for XCuisite evolve?",
        "You mentioned an earlier version, can you tell me more about that transition?"
      ]
    },
    {
      "id": "xc_005",
      "text": "The target audience includes anyone interested in buying doughnuts online, especially within the local delivery area.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "target_audience"
      },
      "questions": ["Who is the target audience for the XCuisite website?"]
    },
    {
      "id": "xc_006",
      "text": "The core technologies used are React (frontend), .NET 8 (backend), Postgres SQL (database), Auth0 (authorization), Stripe/Paynow (payments), and Framer-motion/CSS (animations).",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "tech_stack_overview"
      },
      "questions": [
        "What technologies were used to build the XCuisite website?",
        "XCuisite frameworks used"
      ]
    },
    {
      "id": "xc_007",
      "text": "The previous version was pure HTML/CSS/JS, while the current full-stack version utilizes frameworks and services like React, .NET, Postgres SQL, Auth0, Stripe, and Azure deployment.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "comparison_versions"
      },
      "questions": [
        "What is the difference between the previous XCuisite website and the current one?",
        "what are the differences between previous and current XCuisite website?"
      ]
    },
    {
      "id": "xc_008",
      "text": "My role was the full-stack developer, responsible for implementing both frontend and backend features, including authentication and payment integration.",
      "metadata": { "topic": "project_xcuisite", "subtopic": "developer_role" },
      "questions": ["What was your role in the XCuisite website project?"]
    },
    {
      "id": "xc_009",
      "text": "The development process involved UI design, frontend implementation (React/Framer-motion), backend building (.NET 8), integration of Auth0 and Stripe/Paynow, and application deployment.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "development_process"
      },
      "questions": [
        "What was the development process for the XCuisite website?"
      ]
    },
    {
      "id": "xc_010",
      "text": "User authentication is handled using Auth0. The integration involves Auth0's SDKs in React and .NET. Users can log in via email/password, Google, or Microsoft. Post-login, Auth0 issues a JWT stored in an HTTP-only cookie. This token is sent in request headers for backend validation.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "authentication_implementation",
        "entity": "Auth0"
      },
      "questions": [
        "Explain how you implemented user authentication in the XCuisite website.",
        "explain the need of implement authentication in XCuisite website.",
        "How is user authentication handled?"
      ]
    },
    {
      "id": "xc_011",
      "text": "Using Auth0 simplifies implementing complex/secure authentication (social login, MFA, password reset), offloads security burdens (hashing, tokens), offers scalability, user management features, and saves significant development time versus a custom solution.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "authentication_advantages",
        "entity": "Auth0"
      },
      "questions": [
        "What are the advantages of using Auth0 for authentication?",
        "tell me the advantages of using Auth0 in XCuisite",
        "Why use a third-party service like Auth0 instead of building your own authentication?",
        "What were the main benefits of integrating Auth0?",
        "How did Auth0 simplify the development process for XCuisite?"
      ]
    },
    {
      "id": "xc_012",
      "text": "User sessions post-authentication are managed using the Auth0-issued JWT stored in an HTTP-only cookie. This secure cookie is sent with requests, and the backend verifies the JWT's validity to authorize the user.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "session_management"
      },
      "questions": [
        "How did you handle user sessions after authentication in the XCuisite project?"
      ]
    },
    {
      "id": "xc_013",
      "text": "The website accepts card payments and local Paynow payments, processed via the Stripe payment gateway.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "payment_gateways_methods"
      },
      "questions": [
        "What payment gateways are used?",
        "What are the payment methods supported in XCuisite website?"
      ]
    },
    {
      "id": "xc_014",
      "text": "Payment handling uses Stripe's framework for secure payment sessions. A server-created session redirects the user, and the session ID is used to validate payment completion upon return. Payment cancellation is handled via URL query parameters.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "payment_handling_details",
        "entity": "Stripe"
      },
      "questions": [
        "How is payment processing handled in the XCuisite Website project?",
        "payment XCuisite"
      ]
    },
    {
      "id": "xc_015",
      "text": "The payment flow uses Stripe Checkout. The frontend requests a session from the backend; the backend creates it via Stripe API (with order details, URLs); the frontend redirects the user to Stripe's page using the session ID; after payment, Stripe redirects to the success URL; the backend verifies payment via API.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "payment_flow",
        "entity": "Stripe"
      },
      "questions": [
        "Describe the payment flow in the XCuisite e-commerce website."
      ]
    },
    {
      "id": "xc_016",
      "text": "Secure payment processing was ensured by using Stripe's libraries/best practices, letting Stripe handle sensitive card data directly (PCI compliance), using HTTPS for API communication, and employing Stripe webhooks for reliable, real-time payment status updates.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "payment_security",
        "entity": "Stripe"
      },
      "questions": [
        "How did you ensure secure payment processing with Stripe in XCuisite website?"
      ]
    },
    {
      "id": "xc_017",
      "text": "If a user cancels payment during Stripe checkout, they are redirected back to a specified 'cancel URL' on the XCuisite site. The application identifies this via URL parameters and displays a cancellation message without processing the order.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "payment_cancellation",
        "entity": "Stripe"
      },
      "questions": [
        "What happens if a user cancels their payment during the Stripe checkout process?"
      ]
    },
    {
      "id": "xc_018",
      "text": "React was chosen for the frontend due to its components, ecosystem (integrating Framer Motion), community support, and my familiarity speeding up development.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "tech_choice_rationale",
        "entity": "React"
      },
      "questions": [
        "Why did you choose React for the frontend?",
        "Were other frontend frameworks considered for XCuisite? Why React?",
        "What advantages did React offer for the XCuisite project specifically?"
      ]
    },
    {
      "id": "xc_019",
      "text": ".NET 8 was selected for the backend for its performance, robust ASP.NET Core framework, typing, tooling, security features, Azure integration, cross-platform support, and LTS.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "tech_choice_rationale",
        "entity": ".NET"
      },
      "questions": [
        "Why .NET 8 for the xcuisite backend?",
        "What were the reasons for choosing .NET over other backend technologies like Node.js or Python?",
        "What benefits did .NET 8 provide for the XCuisite backend?"
      ]
    },
    {
      "id": "xc_020",
      "text": "PostgresSQL was chosen for its robustness, reliability, relational integrity, and extensibility. Using Azure's managed Postgres service simplified setup and maintenance (backups, scaling), allowing focus on application development.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "tech_choice_rationale",
        "entity": "PostgresSQL"
      },
      "questions": [
        "Why did you use PostgresSQL instead of other databases like MySQL or MongoDB?",
        "What factors led to choosing Postgres for the XCuisite database?",
        "What advantages did Postgres offer over NoSQL for this project?",
        "can you tell me about XCuisite website? how do you store data?"
      ]
    },
    {
      "id": "xc_021",
      "text": "Stripe was chosen for payment processing due to its developer-friendly APIs/docs, robust security (PCI compliance), support for various payment methods (cards, Paynow), and its simplified, secure Checkout flow.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "tech_choice_rationale",
        "entity": "Stripe"
      },
      "questions": [
        "Why did you choose Stripe for payment processing?",
        "What advantages did Stripe offer compared to other payment gateways?",
        "How did Stripe contribute to the security of XCuisite's payments?"
      ]
    },
    {
      "id": "xc_022",
      "text": "The backend is implemented using .NET 8.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "implementation_summary",
        "entity": "backend"
      },
      "questions": ["How is the backend of the XCuisite website implemented?"]
    },
    {
      "id": "xc_023",
      "text": "The frontend uses React. Modern animations enhance user experience using Framer-motion and CSS.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "implementation_summary",
        "entity": "frontend_animations"
      },
      "questions": [
        "How is the frontend of the XCuisite website implemented?",
        "How are modern animations used on the site?"
      ]
    },
    {
      "id": "xc_024",
      "text": "While core functionality is complete, the site undergoes continuous improvements and updates.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "development_status"
      },
      "questions": ["Is the XCuisite website still under development?"]
    },
    {
      "id": "xc_025",
      "text": "Future plans include a customer loyalty program, personalized recommendations, expanded delivery areas, and real-time order tracking.",
      "metadata": { "topic": "project_xcuisite", "subtopic": "future_plans" },
      "questions": ["What are the future plans for the XCuisite website?"]
    },
    {
      "id": "xc_026",
      "text": "No public-facing documentation is currently available, but the site aims to be intuitive.",
      "metadata": { "topic": "project_xcuisite", "subtopic": "documentation" },
      "questions": [
        "Is there any documentation available for the XCuisite website?"
      ]
    },
    {
      "id": "xc_027",
      "text": "Major technical challenges included ensuring secure communication between decoupled FE/BE (JWTs in HTTP-only cookies across domains, CORS) and reliably integrating Stripe's asynchronous payment webhooks.",
      "metadata": { "topic": "project_xcuisite", "subtopic": "challenges" },
      "questions": [
        "What were the biggest technical challenges you faced during the XCuisite project?",
        "Can you describe a difficult problem you encountered and how you solved it?",
        "Were there any integration issues between the different technologies used?",
        "Tell me about a significant hurdle in the XCuisite development."
      ]
    },
    {
      "id": "xc_028",
      "text": "Debugging Stripe webhooks involved detailed backend logging, using ngrok to receive live webhooks locally during development, and implementing idempotency checks in the handler based on Stripe event IDs.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "debugging_techniques"
      },
      "questions": [
        "How did you debug issues with third-party integrations like Stripe or Auth0?",
        "Can you give an example of a specific debugging process you used?",
        "What tools or techniques helped you troubleshoot problems in XCuisite?"
      ]
    },
    {
      "id": "xc_029",
      "text": "Key takeaways include deepened understanding of full-stack architecture, secure auth patterns (JWT/cookies), payment integration, containerization (Docker), multi-service cloud deployment (Vercel/Azure), and managing FE/BE communication.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "learnings_takeaways"
      },
      "questions": [
        "What were your key takeaways from building XCuisite?",
        "What new skills did you acquire or strengthen through this project?",
        "How did the XCuisite project contribute to your growth as a developer?"
      ]
    },
    {
      "id": "xc_030",
      "text": "In retrospect, implementing comprehensive automated end-to-end tests (e.g., Cypress/Playwright) earlier and setting up a formal CI/CD pipeline would have been beneficial for catching interaction issues and streamlining deployment.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "retrospective_improvements"
      },
      "questions": [
        "Looking back, what would you do differently on the XCuisite project?",
        "Are there any architectural or technological choices you would reconsider?",
        "What lessons learned from XCuisite will you apply to future projects?"
      ]
    },
    {
      "id": "xc_031",
      "text": "Frontend state management used React's built-in hooks: `useState` for component state, `useContext` for global state (auth, cart), and `useEffect` with async/await for data fetching.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "frontend_state_management"
      },
      "questions": [
        "How did you manage application state in the React frontend?",
        "Did you use any state management libraries like Redux or Zustand?",
        "How was data fetching from the backend handled in the frontend?"
      ]
    },
    {
      "id": "xc_032",
      "text": "The .NET backend API follows RESTful principles using ASP.NET Core controllers/actions with dependency injection. Entity Framework Core served as the ORM for database interaction.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "backend_api_architecture"
      },
      "questions": [
        "Can you describe the architecture of the .NET backend API?",
        "How did the backend API interact with the database?",
        "Was the API design RESTful? Can you give examples of endpoints?"
      ]
    },
    {
      "id": "xc_033",
      "text": "Security measures beyond Auth0/Stripe included: HTTPS, strict backend CORS, backend input validation/sanitization (preventing XSS/injection), parameterized queries via EF Core, secure secrets management (environment variables/Azure App Config), and HTTP-only cookies for JWTs.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "security_measures"
      },
      "questions": [
        "How did you ensure the security of the XCuisite application beyond authentication/payments?",
        "What steps were taken to prevent common web vulnerabilities like XSS or SQL injection?",
        "How were sensitive configuration details like API keys managed?"
      ]
    },
    {
      "id": "xc_034",
      "text": "Database schema changes were managed using Entity Framework Core Migrations. New migration scripts were generated via `dotnet ef migrations add` based on model changes and applied using `dotnet ef database update`.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "database_migrations"
      },
      "questions": [
        "How did you handle database schema changes or migrations during development?",
        "What tool or process was used for managing the database schema evolution?",
        "Explain your approach to database migrations in the XCuisite project."
      ]
    },
    {
      "id": "xc_035",
      "text": "The deployment strategy involves deploying the React frontend to Vercel via GitHub push triggers (CD). The .NET backend is containerized with Docker, pushed to Azure Container Registry, and deployed to Azure Container Apps, allowing independent scaling.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "deployment_strategy"
      },
      "questions": [
        "Can you elaborate on the deployment strategy for both frontend and backend?",
        "How are updates to the XCuisite website deployed?",
        "What is the workflow from code commit to live deployment?"
      ]
    },
    {
      "id": "xc_036",
      "text": "Containerizing the backend with Docker provided a consistent environment, simplified dependency management, and made deployment portable. Azure Container Apps offered a serverless container service, managing scaling and infrastructure.",
      "metadata": {
        "topic": "project_xcuisite",
        "subtopic": "containerization_benefits"
      },
      "questions": [
        "What were the benefits of using Docker specifically for the backend?",
        "Why did you choose Azure Container Apps for hosting the backend container?",
        "How did containerization help with the deployment process?"
      ]
    }
  ]
}
